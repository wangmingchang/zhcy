<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd">
        
  		<!-- 开启注解 -->
	<context:annotation-config />
	
  	<!-- 自动扫描 -->
  	<context:component-scan base-package="com.wmc" />
  	
  	
   <!-- 引入
   jdbc.propertory; 
   redis.propertory; 
   mongodb.properties
   配置文件 -->
  <context:property-placeholder location="classpath:jdbc.properties,classpath:redis.properties,classpath:mongodb.properties" />
<!--     <bean id="configRealm" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
          <property name="locations">
             <list>
                 <value>classpath:jdbc.properties</value>
                 <value>classpath:redis.properties</value>
             </list>
         </property>
    </bean> 
   <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer">
          <property name="properties" ref="configRealm"/>
   </bean>
   -->
   <!-- 配置dataSource -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"	 init-method="init" 	destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" 	value="1" />
        <property name="minIdle"	 value="1" />
        <property name="maxActive" 	value="20" />

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000" />

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" 	value="60000" />

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" 	value="300000" />

        <property name="validationQuery" 	value="SELECT 'x'" />
        <property name="testWhileIdle" 	value="true" />
        <property name="testOnBorrow" 	value="false" />
        <property name="testOnReturn" 	value="false" />

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" 	value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize"	value="20" />
   </bean>
   
   
   <!-- 配置sqlSessionFactory -->
  <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="mapperLocations" value="classpath:com/wmc/mapping/*.xml"/>
	</bean>
  
  
    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->
    <!-- 扫描mybatis的mapper接口 -->
  <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
   		 <property name="basePackage"		value="com.wmc.mapping" />
  </bean>
  
  
	<!-- 配置事务管理器 -->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	  <!-- 使用annotation定义事务 -->
    <tx:annotation-driven transaction-manager="txManager" proxy-target-class="true" />
	
   <import resource="spring-redis.xml"/> 
   <import resource="spring-mongodb.xml"/> 

</beans>